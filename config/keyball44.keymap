#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        right-reset {
            bindings = <&bootloader>;
            key-positions = <10 11>;
        };

        left-reset {
            bindings = <&bootloader>;
            key-positions = <0 1>;
        };
    };

    macros {
        wife: wife {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp I &kp F &kp E &kp I &kp S &kp LS(Y) &kp I &kp N &kp G &kp H &kp U &kp I &kp LS(L) &kp I>;
            label = "WIFE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp ESCAPE        &kp Q  &kp W        &kp E         &kp R  &kp T             &kp Y      &kp U  &kp I      &kp O    &kp P      &kp BACKSPACE
&mo 3             &kp A  &kp S        &kp D         &kp F  &kp G             &kp H      &kp J  &kp K      &kp L    &kp SEMI   &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X        &kp C         &kp V  &kp B             &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_ALT
&kp LEFT_CONTROL  &mo 1  &lt 4 SPACE  &kp LEFT_WIN  &mo 5             &mo 2  &kp ENTER                                        &kp TAB
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&none   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3              &kp NUMBER_4  &kp NUMBER_5              &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &none
&none   &kp LEFT      &kp DOWN      &kp UP_ARROW              &kp RIGHT     &none                     &none         &none         &none         &none         &none         &none
&none   &none         &none         &kp LG(LC(LS(NUMBER_4)))  &none         &none                     &none         &none         &trans        &trans        &none         &none
&trans  &trans        &trans        &trans                    &trans                          &trans  &trans                                                                &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&none           &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT              &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none
&bt BT_CLR_ALL  &bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans                   &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp SQT                &none
&none           &trans           &trans        &trans        &trans        &trans                   &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp NON_US_BACKSLASH   &none
&trans          &trans           &trans        &trans        &trans                         &trans  &trans                                                                                        &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none   &kp F1            &kp F2        &kp F3   &kp F4   &none              &none  &none     &kp UP_ARROW    &none      &none  &none
&none   &kp LEFT_CONTROL  &kp LEFT_ALT  &kp F7   &kp F8   &none              &none  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &none  &none
&none   &kp F9            &kp F10       &kp F11  &kp F12  &none              &none  &none     &none           &none      &none  &none
&trans  &trans            &kp LG(TAB)   &trans   &trans              &trans  &mo 3                                              &wife
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&none   &trans          &trans          &trans        &trans     &trans              &trans         &trans     &trans  &trans     &trans     &none
&none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none               &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &mkp MCLK  &none
&none   &none           &none           &none         &none      &none               &kp PAGE_DOWN  &none      &none   &none      &none      &none
&trans  &trans          &trans          &trans        &trans                 &trans  &trans                                                  &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };
    };
};
